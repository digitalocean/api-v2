GET     /oauth/authorizations
POST    /oauth/authorizations
GET     /oauth/authorizations/:id
DELETE  /oauth/authorizations/:id

GET     /oauth/clients
POST    /oauth/clients
GET     /oauth/clients/:id
PATCH   /oauth/clients/:id
DELETE  /oauth/clients/:id

POST    /oauth/tokens


# Regions

name
id
slug

GET     /regions

# Sizes

name
id
slug
regions   * TODO

GET     /sizes

# Keys

fingerprint
id
public_key
name

GET     /account/keys
POST    /account/keys
GET     /account/keys/:id_or_fingerprint
DELETE  /account/keys/:id_or_fingerprint

# Domains

id
name
ttl
live_zone_file
error?
zone_file_with_error?

GET     /domains
POST    /domains
GET     /domains/:name
DELETE  /domains/:name

# Domain Records

type
name
data
priority
port
weight


GET     /domains/:name/records
POST    /domains/:name/records
GET     /domains/:name/records/:id
PATCH   /domains/:name/records/:id
DELETE  /domains/:name/records/:id

# Images

id
name
distribution
slug
public


GET     /images
GET     /images/:id
PATCH   /images/:id
DELETE  /images/:id
POST    /images/:id/actions                # event producer
  Action type available:
    transfer(region)
GET     /images/:id/actions/:id            # event resource

# Droplets

id
image_id
name
region_id
size_id
backups_active
backups
snapshots
ip_address
private_ip_address
locked
status

ssh_keys

POST    /droplets                         # event producer
GET     /droplets
GET     /droplets/:id
DELETE  /droplets/:id                     # event dependent
PATCH   /droplets/:id

GET     /droplets/:id/actions
POST    /droplets/:id/actions              # event producer
  Action types available:
    reboot(soft/hard)
    shutdown(soft/hard)
    boot
    resetpassword
    resize(size)
    snapshot(name)
    rebuild(image)
    restore(image)
GET     /droplets/:id/actions/:id          # event resource

GET     /droplets/self


# About events

Some resources have event sub-resources to model long-running async operations.
An event resource is mostly specific to the resource it is an event for, however
it must model whether it has completed or not. It may also include a percentage
value for its progress.

There are two current ways to deal with events:

1. Traditional Links and Polling
  If an event is created directly (POST on a /events), then a 201 Created response
  with a Location header linking to the event resource is provided. You can then
  poll this resource until it is completed.

  If an event is produced as a byproduct (boot event on POST /droplets), then a 201
  Created response is provided with a Location header to the resource created AND 
  a Link header of rel=event pointing to the event resource. You can then poll the 
  resource via the Link header until it is completed.
  
  If an event is created that precludes the current action on a resource 
  (DELETE /droplets/:id), then a 202 Accepted response is given with a Location header
  pointing to the event resource is given. Again you can poll this to find out when
  the operation completed.

2. Long-polling and Pragma: event-wait
  This approach takes advantage of long-polling to block on requests for event resources
  until the event is completed. The way this option is enabled is using the request header
  "Pragma: event-wait". This directive effects the API in two ways:
  
  If used on a request to GET an event resource, it will block until the event completes.
  
  If used on a request that produces or depends on an event, it will change the response
  behavior to respond with 303 See Also and a Location header to the event resource. This
  results in the potential for an automatic redirect to the event resource that should carry
  over the Pragma: event-wait header, which will cause it to block. This allows you to enable
  blocking behavior from resource operations that don't directly model the event, but may be
  convenient to block from.
	
A third way is possible in the future based on webhooks.